BlacklightEVO docs/evofs.txt -- EVOfs specification
Copyright (c) 2013-2015 The Cordilon Group -- http://www.blacklightevo.org
Questions? Comments? Concerns? Email us: blacklight@cordilon.net

 _____   _____   __    
| __\ \ / / _ \ / _|___
| _| \ V / (_) |  _(_-<
|___| \_/ \___/|_| /__/
 Version 0: 10/19/2014


1. Filesystem Structure

	+--------------+---- sector 0x0000
	|              |     (length: 1 sector)
	| Volume  Boot |
	|    Record    |
	|              |
	+--------------+---- sector 0x0001
	|              |     (length: 60 sectors)
	| Second Stage |
	|  Bootloader  |
	|              |
	+--------------+---- sector 0x003D
	|              |     (length: 3 sectors)
	|   Reserved   |
	|              |
	+--------------+---- sector 0x0040
	|              |     (length: vol_size/8 sectors)
	|  Blocktable  |
	|              |
	+--------------+---- sector xxxx
	|              |     (length: vol_size-vol_data_start sectors)
	|     Data     |
	|              |
	+--------------+---- End of volume


2. Master Boot Record

An EVOfs-specific MBR is not required, nor does the BlacklightEVO reference
implementation of an MBR level boot sector do anything other than load the
active partition's volume boot record and execute it.

In the MBR partition table, EVOfs partitions should be marked with type ID
0xE0. This type ID was chosen due to it being unused (as far as we're aware,
at least -- both Linux fdisk and GParted have no idea what goes in partition
type ID 0xE0) and because it looks like "EVO" with just the vowels.


3. Volume Boot Record

An EVOfs VBR, at minimum, should check for the presence of vol_magic to ensure
there is a valid EVOfs filesystem, and then load the second stage bootloader.
The second stage bootloader is always stored in the sectors following the
volume boot record, and is elaborated on in the next section.

The Volume Boot Record contains the following filesystem data at offset 0x140:

	0x140	vol_magic			uint32_t	MUST BE 0x214F5645 - "EVO!"
	0x144	vol_size			uint32_t	Volume length in sectors
	0x148	vol_version			uint32_t	EVOfs version (currently 0)
	0x14C	vol_creator			uint32_t	Tools that created the volume
	0x150	vol_data_start		uint32_t	Starting sector of the data area
	0x154	vol_mount_time		uint32_t	Time the volume was last mounted
	0x158	vol_unmount_time	uint32_t	Time the volume was last unmounted
	0x15C	vol_stage2_sum		uint32_t	Checksum of stage2
	
vol_creator can be any of the following:
	0x00000000 = unknown
	0x00000001 = evofstools (platform independent)

vol_mount_time must be written only on mount and must be written if the medium
supports being written to (except if the volume is being mounted read-only).
If vol_mount_time is not written to, vol_unmount_time must not be written on
unmount. If vol_mount_time has been written to, vol_unmount_time must be
updated on unmount.

At mount time, before writing to vol_mount_time, if vol_unmount_time is older
than vol_mount_time, it should be assumed that the volume was not unmounted
cleanly and that filesystem errors may exist.


4. Second Stage Bootloader

The EVOfs specification sets aside 60 sectors (30 kilobytes) following the
volume boot record for a second stage bootloader. The second stage bootloader
is loaded by the volume boot record to 0x0000:0x8000 (the beginning of the
33rd kilobyte of RAM) in an environment that at minimum must satisfy the
following requirements on x86 platforms:

	Processor mode = real (8086) mode
	CS:IP = 0x0000:0x8000
	DL = BIOS ID of the boot drive
	ES:BX = pointer to the 16-byte MBR partition entry for the boot partition
	
It should be assumed that the processor is at least an 80386, however it would
be wise for the second stage bootloader to do checks to make sure the system
meets whatever requirements the operating system being loaded has.


5. Blocktable

The blocktable is a simple array of bytes with length equal to the number of
sectors in the volume divided by 8. Each bit in the array corresponds to a
sector in the volume (eg. byte 12345 corresponds to sector 12345). If the byte
is 0, the sector is free and may be used by a file. If the byte is 1, the
sector is already allocated to a file.

Upon filesystem creation, the area used by the blocktable should be zeroed and
the sectors before the data section of the volume should be marked used in the
blocktable. Zeroing the blocktable before marking the pre-data sectors as used
ensures that the sectors in the data section are marked free. Clearing the
data section of the volume is optional.


6. Data Section

The data section comprises every sector in the volume after the blocktable and
is used to store data, directories, nodes, et cetera.

Each data sector begins with a 4-byte value pointing to the next data sector in the file or a special value to denote something else:

	0x00000000 = no more data (last sector in the file)
	0x00000001 = fileblock (first sector of a file)
	0x00000002 through 0x0000003F = reserved
	0x00000040 through vol_data_start-1 = invalid (maps to the blocktable)

If the data sector begins with any valid pointer (including 0x00000000), the
remaining 508 bytes in the sector are used to store file data. Otherwise,
special structures apply depending on the value.


7. Fileblocks

A file information block or fileblock is a special data sector (ID 0x00000001) that denotes the start of a file. Fileblocks take on the following format:

	0x000	fb_ident		uint32_t	Fileblock identifier (0x00000001)
	0x004	fb_next_sector	uint32_t	Link to the next sector in the file
	0x008	fb_size			uint32_t	Size of the file in bytes
	0x00C	fb_flags		uint32_t	Flags for the file
	0x010	fb_time_create	time_t		Creation timestamp
	0x014	fb_time_modify	time_t		Modify timestamp
	0x018	fb_links		uint32_t	Link count (file dents pointing here)
	0x100	fb_data			256 bytes	Start of the file data
	
Flags:
	0x00000008	FB_FLAG_
	0x00000004	FB_FLAG_SYMLINK			File is a symbolic link
	0x00000002	FB_FLAG_SYSTEM			File is a core system file
	0x00000001	FB_FLAG_DIRECTORY		File is a directory
	
8. Directories

Directories are files with flag 0x00000001 set, with the following format
(repeating until end of file):

	0x0000	dent_name		char[124]	Filename, null-terminated, null-padded
	0x007C	dent_fileblock	uint32_t	Fileblock associated with the file
